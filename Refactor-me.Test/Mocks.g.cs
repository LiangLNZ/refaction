// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
// 
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
// ------------------------------------------------------------------------
namespace refactor_me.Models.Services.Mocks
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class ConfigurationManagerWapperMock : global::PCLMock.MockBase<global::refactor_me.Models.Services.IConfigurationManagerWapper>, global::refactor_me.Models.Services.IConfigurationManagerWapper
    {
        public ConfigurationManagerWapperMock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base (behavior)
        {
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehavior();
            }
        }

        partial void ConfigureLooseBehavior();
        public global::System.String GetConnectionString(global::System.String name)
        {
            return this.Apply(x => x.GetConnectionString(name));
        }

        public global::System.String GetDbProviderName(global::System.String name)
        {
            return this.Apply(x => x.GetDbProviderName(name));
        }

        public global::System.String GetAppSettingValue(global::System.String key)
        {
            return this.Apply(x => x.GetAppSettingValue(key));
        }
    }
}
namespace refactor_me.Models.Services.Mocks
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class DataProviderFactoryMock : global::PCLMock.MockBase<global::refactor_me.Models.Services.IDataProviderFactory>, global::refactor_me.Models.Services.IDataProviderFactory
    {
        public DataProviderFactoryMock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base (behavior)
        {
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehavior();
            }
        }

        partial void ConfigureLooseBehavior();
        public global::System.Data.IDbCommand RunCommand(global::System.String commandText, global::System.String connectionName)
        {
            return this.Apply(x => x.RunCommand(commandText, connectionName));
        }
    }
}
namespace refactor_me.Models.Services.Mocks
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class ProductOptionServiceMock : global::PCLMock.MockBase<global::refactor_me.Models.Services.IProductOptionService>, global::refactor_me.Models.Services.IProductOptionService
    {
        public ProductOptionServiceMock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base (behavior)
        {
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehavior();
            }
        }

        partial void ConfigureLooseBehavior();
        public global::System.Collections.Generic.IEnumerable<global::refactor_me.Models.ProductOption> LoadProductOptions(global::System.Guid productId)
        {
            return this.Apply(x => x.LoadProductOptions(productId));
        }

        public global::refactor_me.Models.ProductOption GetProductOptionByIds(global::System.Guid productId, global::System.Guid id)
        {
            return this.Apply(x => x.GetProductOptionByIds(productId, id));
        }

        public void SaveProductOption(global::refactor_me.Models.ProductOption productOption)
        {
            this.Apply(x => x.SaveProductOption(productOption));
        }

        public void DeleteProductOption(global::System.Guid id)
        {
            this.Apply(x => x.DeleteProductOption(id));
        }
    }
}
namespace refactor_me.Models.Services.Mocks
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class ProductServiceMock : global::PCLMock.MockBase<global::refactor_me.Models.Services.IProductService>, global::refactor_me.Models.Services.IProductService
    {
        public ProductServiceMock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base (behavior)
        {
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehavior();
            }
        }

        partial void ConfigureLooseBehavior();
        public global::System.Collections.Generic.IEnumerable<global::refactor_me.Models.Product> LoadProducts(global::System.String name)
        {
            return this.Apply(x => x.LoadProducts(name));
        }

        public global::refactor_me.Models.Product GetProductById(global::System.Guid id)
        {
            return this.Apply(x => x.GetProductById(id));
        }

        public void SaveProduct(global::refactor_me.Models.Product product)
        {
            this.Apply(x => x.SaveProduct(product));
        }

        public void DeleteProduct(global::System.Guid id)
        {
            this.Apply(x => x.DeleteProduct(id));
        }
    }
}

